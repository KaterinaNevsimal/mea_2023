%% ELECTRODES SPECIFICATION
% Signal 1 (fs=25kHz)
fs = 25000; % sampling frequency 25kHz
signal = signal(4:end,:);   % just for first subsignal with the header
electrode_names = {'electrode 47', 'electrode 48', 'electrode 46', 'electrode 45', ...
                   'electrode 38', 'electrode 37', 'electrode 28', 'electrode 36', ...
                   'electrode 27', 'electrode 17', 'electrode 26', 'electrode 16', ...
                   'electrode 35', 'electrode 25', 'electrode 15', 'electrode 14', ...
                   'electrode 24', 'electrode 34', 'electrode 13', 'electrode 23', ...
                   'electrode 12', 'electrode 22', 'electrode 33', 'electrode 21', ...
                   'electrode 32', 'electrode 31', 'electrode 44', 'electrode 43', ...
                   'electrode 41', 'electrode 42', 'electrode 52', 'electrode 51', ...
                   'electrode 53', 'electrode 54', 'electrode 61', 'electrode 62', ...
                   'electrode 71', 'electrode 63', 'electrode 72', 'electrode 82', ...
                   'electrode 73', 'electrode 83', 'electrode 64', 'electrode 74', ...
                   'electrode 84', 'electrode 85', 'electrode 75', 'electrode 65', ...
                   'electrode 86', 'electrode 76', 'electrode 87', 'electrode 77', ...
                   'electrode 66', 'electrode 78', 'electrode 67', 'electrode 42', ...
                   'electrode 78', 'electrode 55', 'electrode 56', 'electrode 58', ...
                   'electrode 57'};
t = signal(:,1);
volt_el47 = signal(:,2);
volt_el48 = signal(:,3);
volt_el46 = signal(:,4);
volt_el45 = signal(:,5);
volt_el38 = signal(:,6);
volt_el37 = signal(:,7);
volt_el28 = signal(:,8);
volt_el36 = signal(:,9);
volt_el27 = signal(:,10);
volt_el17 = signal(:,11);
volt_el26 = signal(:,12);
volt_el16 = signal(:,13);
volt_el35 = signal(:,14);
volt_el25 = signal(:,15);
volt_el15 = signal(:,16);
volt_el14 = signal(:,17);
volt_el24 = signal(:,18);
volt_el34 = signal(:,19);
volt_el13 = signal(:,20);
volt_el23 = signal(:,21);
volt_el12 = signal(:,22);
volt_el22 = signal(:,23);
volt_el33 = signal(:,24);
volt_el21 = signal(:,25);
volt_el32 = signal(:,26);
volt_el31 = signal(:,27);
volt_el44 = signal(:,28);
volt_el43 = signal(:,29);
volt_el41 = signal(:,30);
volt_el42 = signal(:,31);
volt_el52 = signal(:,32);
volt_el51 = signal(:,33);
volt_el53 = signal(:,34);
volt_el54 = signal(:,35);
volt_el61 = signal(:,36);
volt_el62 = signal(:,37);
volt_el71 = signal(:,38);
volt_el63 = signal(:,39);
volt_el72 = signal(:,40);
volt_el82 = signal(:,41);
volt_el73 = signal(:,42);
volt_el83 = signal(:,43);
volt_el64 = signal(:,44);
volt_el74 = signal(:,45);
volt_el84 = signal(:,46);
volt_el85 = signal(:,47);
volt_el75 = signal(:,48);
volt_el65 = signal(:,49);
volt_el86 = signal(:,50);
volt_el76 = signal(:,51);
volt_el87 = signal(:,52);
volt_el77 = signal(:,53);
volt_el66 = signal(:,54);
volt_el78 = signal(:,55);
volt_el67 = signal(:,56);
volt_el68 = signal(:,57);
volt_el55 = signal(:,58);
volt_el56 = signal(:,59);
volt_el58 = signal(:,60);
volt_el57 = signal(:,61);

%% signal plot
figure("Name","Electrode 77");
plot(t,volt_el17);
for electrode = 2:size(signal,2)
    voltage = signal(:,electrode)
    subplot(ceil(sqrt(electrodes_num-1)),ceil(sqrt(electrodes_num-1)), electrode-1)
    plot(t, signal)
    hold on
    
    xlabel('Time (ms)')
    ylabel('Voltage (uV)')
    title(electrode_names{electrode})
end

%%
figure(1);
plot()

%% SIGNAL FILTER (passband), PEAK DETECTION

order = 3; % filter order
% cutoff frequencies
cut_f1 = 300;
cut_f2 = 3000;
electrodes_num = 61;

% loop over each electrode
for electrode = 2:size(signal, 2) % assuming time is in the first column
    % Get voltage measurements for this electrode
    voltage = signal(:, electrode);
    
    % filter design
    filter = designfilt('bandpassfir', 'FilterOrder', order, 'CutoffFrequency1',cut_f1, ...
                        'CutoffFrequency2', cut_f2, 'SampleRate', fs);
    % apply filter on signal
    filtered_signal = filtfilt(filter, voltage);

    % threshold set
    abs_voltage = abs(voltage);
    noise_var = median(abs_voltage/0.6745); % ambient noise variance estimate
    threshold = 2 * noise_var;
    %threshold = 3 * std(voltage);

    % apply threshold
    thresholded = abs(filtered_signal) - threshold;
    thresholded(thresholded < 0) = 0;
    

    % spike detection
    [spike_value, spike_indices] = findpeaks(thresholded, 'MinPeakHeight', threshold, 'MinPeakDistance', 10);

    % refine spike detection
    refined_spikes = refine_spikes(spike_indices, filtered_signal, threshold, t);

     % spike data store
    spike_data{electrode} = [spike_indices, t(spike_indices), filtered_signal(spike_indices)]

    % spikes plot
    subplot(ceil(sqrt(electrodes_num-1)),ceil(sqrt(electrodes_num-1)), electrode-1)
    plot(t, filtered_signal)
    hold on
    
    if ~isempty(refined_spikes)
        scatter(refined_spikes(:,1), refined_spikes(:,2), 'r', 'filled')
    end
    
    xlabel('Time (ms)')
    ylabel('Voltage (uV)')
    title(electrode_names{electrode})
 
end

% MFR 
time_interval = 10;


% Define a function to refine the spikes
function refined_spikes = refine_spikes(spike_indices, filtered_signal, threshold, time)
    refined_spikes = [];
    for i = 1:length(spike_indices)
        spike_start = spike_indices(i);
        spike_end = spike_start + find(filtered_signal(spike_start+1:end) < threshold, 1);
        if isempty(spike_end)
            spike_end = length(filtered_signal);
        else
            spike_end = spike_start + spike_end;
        end
        if filtered_signal(spike_start) > threshold && (spike_end - spike_start) >= 10
            refined_spikes(end+1,:) = [time(spike_start), filtered_signal(spike_start)];
        end
    end
end
% burst detection (ISI, min_spikes)
